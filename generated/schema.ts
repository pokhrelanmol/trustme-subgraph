// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AllTrade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AllTrade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AllTrade must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllTrade", id.toString(), this);
    }
  }

  static load(id: string): AllTrade | null {
    return changetype<AllTrade | null>(store.get("AllTrade", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tradeID(): BigInt {
    let value = this.get("tradeID");
    return value!.toBigInt();
  }

  set tradeID(value: BigInt) {
    this.set("tradeID", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get tokenToSell(): Bytes {
    let value = this.get("tokenToSell");
    return value!.toBytes();
  }

  set tokenToSell(value: Bytes) {
    this.set("tokenToSell", Value.fromBytes(value));
  }

  get tokenToBuy(): Bytes {
    let value = this.get("tokenToBuy");
    return value!.toBytes();
  }

  set tokenToBuy(value: Bytes) {
    this.set("tokenToBuy", Value.fromBytes(value));
  }

  get tokenAmtToSell(): BigInt {
    let value = this.get("tokenAmtToSell");
    return value!.toBigInt();
  }

  set tokenAmtToSell(value: BigInt) {
    this.set("tokenAmtToSell", Value.fromBigInt(value));
  }

  get tokenAmtToBuy(): BigInt {
    let value = this.get("tokenAmtToBuy");
    return value!.toBigInt();
  }

  set tokenAmtToBuy(value: BigInt) {
    this.set("tokenAmtToBuy", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value!.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class TradeCanceled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradeCanceled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TradeCanceled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TradeCanceled", id.toString(), this);
    }
  }

  static load(id: string): TradeCanceled | null {
    return changetype<TradeCanceled | null>(store.get("TradeCanceled", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tradeID(): BigInt {
    let value = this.get("tradeID");
    return value!.toBigInt();
  }

  set tradeID(value: BigInt) {
    this.set("tradeID", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }
}

export class TradeConfirmed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradeConfirmed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TradeConfirmed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TradeConfirmed", id.toString(), this);
    }
  }

  static load(id: string): TradeConfirmed | null {
    return changetype<TradeConfirmed | null>(store.get("TradeConfirmed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tradeID(): BigInt {
    let value = this.get("tradeID");
    return value!.toBigInt();
  }

  set tradeID(value: BigInt) {
    this.set("tradeID", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }
}

export class TradeCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradeCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TradeCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TradeCreated", id.toString(), this);
    }
  }

  static load(id: string): TradeCreated | null {
    return changetype<TradeCreated | null>(store.get("TradeCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tradeID(): BigInt {
    let value = this.get("tradeID");
    return value!.toBigInt();
  }

  set tradeID(value: BigInt) {
    this.set("tradeID", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get tokenToSell(): Bytes {
    let value = this.get("tokenToSell");
    return value!.toBytes();
  }

  set tokenToSell(value: Bytes) {
    this.set("tokenToSell", Value.fromBytes(value));
  }

  get tokenToBuy(): Bytes {
    let value = this.get("tokenToBuy");
    return value!.toBytes();
  }

  set tokenToBuy(value: Bytes) {
    this.set("tokenToBuy", Value.fromBytes(value));
  }

  get tokenAmtToSell(): BigInt {
    let value = this.get("tokenAmtToSell");
    return value!.toBigInt();
  }

  set tokenAmtToSell(value: BigInt) {
    this.set("tokenAmtToSell", Value.fromBigInt(value));
  }

  get tokenAmtToBuy(): BigInt {
    let value = this.get("tokenAmtToBuy");
    return value!.toBigInt();
  }

  set tokenAmtToBuy(value: BigInt) {
    this.set("tokenAmtToBuy", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value!.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }
}

export class TradeExpired extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradeExpired entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TradeExpired must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TradeExpired", id.toString(), this);
    }
  }

  static load(id: string): TradeExpired | null {
    return changetype<TradeExpired | null>(store.get("TradeExpired", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tradeID(): BigInt {
    let value = this.get("tradeID");
    return value!.toBigInt();
  }

  set tradeID(value: BigInt) {
    this.set("tradeID", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }
}

export class TradeWithdrawn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradeWithdrawn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TradeWithdrawn must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TradeWithdrawn", id.toString(), this);
    }
  }

  static load(id: string): TradeWithdrawn | null {
    return changetype<TradeWithdrawn | null>(store.get("TradeWithdrawn", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tradeID(): BigInt {
    let value = this.get("tradeID");
    return value!.toBigInt();
  }

  set tradeID(value: BigInt) {
    this.set("tradeID", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}
