// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TradeCanceled extends ethereum.Event {
  get params(): TradeCanceled__Params {
    return new TradeCanceled__Params(this);
  }
}

export class TradeCanceled__Params {
  _event: TradeCanceled;

  constructor(event: TradeCanceled) {
    this._event = event;
  }

  get tradeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TradeConfirmed extends ethereum.Event {
  get params(): TradeConfirmed__Params {
    return new TradeConfirmed__Params(this);
  }
}

export class TradeConfirmed__Params {
  _event: TradeConfirmed;

  constructor(event: TradeConfirmed) {
    this._event = event;
  }

  get tradeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TradeCreated extends ethereum.Event {
  get params(): TradeCreated__Params {
    return new TradeCreated__Params(this);
  }
}

export class TradeCreated__Params {
  _event: TradeCreated;

  constructor(event: TradeCreated) {
    this._event = event;
  }

  get tradeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenToSell(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenToBuy(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get tokenAmtToSell(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get tokenAmtToBuy(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class TradeExpired extends ethereum.Event {
  get params(): TradeExpired__Params {
    return new TradeExpired__Params(this);
  }
}

export class TradeExpired__Params {
  _event: TradeExpired;

  constructor(event: TradeExpired) {
    this._event = event;
  }

  get tradeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TradeWithdrawn extends ethereum.Event {
  get params(): TradeWithdrawn__Params {
    return new TradeWithdrawn__Params(this);
  }
}

export class TradeWithdrawn__Params {
  _event: TradeWithdrawn;

  constructor(event: TradeWithdrawn) {
    this._event = event;
  }

  get tradeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TrustMe__getTradeResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get buyer(): Address {
    return this[2].toAddress();
  }

  get tokenToSell(): Address {
    return this[3].toAddress();
  }

  get tokenToBuy(): Address {
    return this[4].toAddress();
  }

  get amountOfTokenToSell(): BigInt {
    return this[5].toBigInt();
  }

  get amountOfTokenToBuy(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get status(): i32 {
    return this[8].toI32();
  }
}

export class TrustMe__tradeIDToTradeResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: i32;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getSeller(): Address {
    return this.value1;
  }

  getBuyer(): Address {
    return this.value2;
  }

  getTokenToSell(): Address {
    return this.value3;
  }

  getTokenToBuy(): Address {
    return this.value4;
  }

  getAmountOfTokenToSell(): BigInt {
    return this.value5;
  }

  getAmountOfTokenToBuy(): BigInt {
    return this.value6;
  }

  getDeadline(): BigInt {
    return this.value7;
  }

  getStatus(): i32 {
    return this.value8;
  }
}

export class TrustMe extends ethereum.SmartContract {
  static bind(address: Address): TrustMe {
    return new TrustMe("TrustMe", address);
  }

  getPendingTradesIDs(): Array<BigInt> {
    let result = super.call(
      "getPendingTradesIDs",
      "getPendingTradesIDs():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getPendingTradesIDs(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPendingTradesIDs",
      "getPendingTradesIDs():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTrade(_tradeID: BigInt): TrustMe__getTradeResultValue0Struct {
    let result = super.call(
      "getTrade",
      "getTrade(uint256):((uint256,address,address,address,address,uint256,uint256,uint256,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_tradeID)]
    );

    return changetype<TrustMe__getTradeResultValue0Struct>(result[0].toTuple());
  }

  try_getTrade(
    _tradeID: BigInt
  ): ethereum.CallResult<TrustMe__getTradeResultValue0Struct> {
    let result = super.tryCall(
      "getTrade",
      "getTrade(uint256):((uint256,address,address,address,address,uint256,uint256,uint256,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_tradeID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TrustMe__getTradeResultValue0Struct>(value[0].toTuple())
    );
  }

  getTradeStatus(_tradeID: BigInt): i32 {
    let result = super.call(
      "getTradeStatus",
      "getTradeStatus(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(_tradeID)]
    );

    return result[0].toI32();
  }

  try_getTradeStatus(_tradeID: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getTradeStatus",
      "getTradeStatus(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(_tradeID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTradesIDsByUser(_user: Address): Array<BigInt> {
    let result = super.call(
      "getTradesIDsByUser",
      "getTradesIDsByUser(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigIntArray();
  }

  try_getTradesIDsByUser(_user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTradesIDsByUser",
      "getTradesIDsByUser(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  pendingTradesIDs(param0: BigInt): BigInt {
    let result = super.call(
      "pendingTradesIDs",
      "pendingTradesIDs(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_pendingTradesIDs(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingTradesIDs",
      "pendingTradesIDs(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradeIDToTrade(param0: BigInt): TrustMe__tradeIDToTradeResult {
    let result = super.call(
      "tradeIDToTrade",
      "tradeIDToTrade(uint256):(uint256,address,address,address,address,uint256,uint256,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new TrustMe__tradeIDToTradeResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toI32()
    );
  }

  try_tradeIDToTrade(
    param0: BigInt
  ): ethereum.CallResult<TrustMe__tradeIDToTradeResult> {
    let result = super.tryCall(
      "tradeIDToTrade",
      "tradeIDToTrade(uint256):(uint256,address,address,address,address,uint256,uint256,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TrustMe__tradeIDToTradeResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toI32()
      )
    );
  }

  userToTradesIDs(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userToTradesIDs",
      "userToTradesIDs(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userToTradesIDs(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userToTradesIDs",
      "userToTradesIDs(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddTradeCall extends ethereum.Call {
  get inputs(): AddTradeCall__Inputs {
    return new AddTradeCall__Inputs(this);
  }

  get outputs(): AddTradeCall__Outputs {
    return new AddTradeCall__Outputs(this);
  }
}

export class AddTradeCall__Inputs {
  _call: AddTradeCall;

  constructor(call: AddTradeCall) {
    this._call = call;
  }

  get _buyer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenToSell(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenToBuy(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amountOfTokenToSell(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _amountOfTokenToBuy(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _tradePeriod(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AddTradeCall__Outputs {
  _call: AddTradeCall;

  constructor(call: AddTradeCall) {
    this._call = call;
  }
}

export class CancelTradeCall extends ethereum.Call {
  get inputs(): CancelTradeCall__Inputs {
    return new CancelTradeCall__Inputs(this);
  }

  get outputs(): CancelTradeCall__Outputs {
    return new CancelTradeCall__Outputs(this);
  }
}

export class CancelTradeCall__Inputs {
  _call: CancelTradeCall;

  constructor(call: CancelTradeCall) {
    this._call = call;
  }

  get _tradeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelTradeCall__Outputs {
  _call: CancelTradeCall;

  constructor(call: CancelTradeCall) {
    this._call = call;
  }
}

export class CheckExpiredTradesCall extends ethereum.Call {
  get inputs(): CheckExpiredTradesCall__Inputs {
    return new CheckExpiredTradesCall__Inputs(this);
  }

  get outputs(): CheckExpiredTradesCall__Outputs {
    return new CheckExpiredTradesCall__Outputs(this);
  }
}

export class CheckExpiredTradesCall__Inputs {
  _call: CheckExpiredTradesCall;

  constructor(call: CheckExpiredTradesCall) {
    this._call = call;
  }
}

export class CheckExpiredTradesCall__Outputs {
  _call: CheckExpiredTradesCall;

  constructor(call: CheckExpiredTradesCall) {
    this._call = call;
  }
}

export class ConfirmTradeCall extends ethereum.Call {
  get inputs(): ConfirmTradeCall__Inputs {
    return new ConfirmTradeCall__Inputs(this);
  }

  get outputs(): ConfirmTradeCall__Outputs {
    return new ConfirmTradeCall__Outputs(this);
  }
}

export class ConfirmTradeCall__Inputs {
  _call: ConfirmTradeCall;

  constructor(call: ConfirmTradeCall) {
    this._call = call;
  }

  get _tradeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConfirmTradeCall__Outputs {
  _call: ConfirmTradeCall;

  constructor(call: ConfirmTradeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _tradeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
